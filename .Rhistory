sqrt(50)*sqrt(5)
sqrt(50*5)
arcos
arccos
acos
acos(15/sqrt(250))
-acos(15/sqrt(250))
sqrt((-3-1.1)^2+(4-1.5)^2)
?vapply
?append
?sort
?seq
?grepl
?mapply
?rep
?trace
?set.seed
str(lapply)
lapply
?.Internal
?format
?strptime
mean(1,2)
mean(2,7)
mean(c(1,6))
?paste0
?colnames
?max
gsub
?gsub
nchar
?nchar
?count
?nrow
6*-5
6*-3
-3+5
9*6
-24*6
-30*3
6*3+6*4+-3*2
6*3+6*4-3*2
6*9-6*24+3*30
VIF
vif
load("car")
library(car)
vif
?vif
18/sqrt(73)
sqrt(73)
6^2+(18/sqrt(73))^2
sqrt(40.43836)
18/sqrt73)
18/sqrt(73)
sqrt(73)
sqrt(73)-18/sqrt(73)
(sqrt(73)-18/sqrt(73))^2+6^2
(sqrt(73)-18/sqrt(73))^2+6^2)
(sqrt(73)-18/sqrt(73))^2+(6^2)
sqrt((sqrt(73)-18/sqrt(73))^2+(6^2))
percentOpenings <- as.matrix(c(24, 6, 19))
percentOpenings
names(percentOpenings) <- c(BachelorsPlus, Associate, Certificate)
names(percentOpenings) <- c("BachelorsPlus", "Associate", "Certificate")
percentOpenings
install.packages("shiny")
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input,output){}
shinyApp(ui = ui, server = server)
library(shiny)
install.packages("shinydashboard")
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
?car
library(shiny)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputID = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
?exists
?"source"
hist(input$num)                        #Plot with inputs changing
library(shiny)
#if(!exists("<functionname>", mode = "function")) source("<filename>") #Calls function from another R file into the workspace
ui <- fluidPage(
sliderInput(inputId = "num",                   #Variable Name in function (ShareFromNewEnrollees)
label = "Choose a number",         #Title of Slider ("Share From New Enrollees in %")
value = 25, min = 1, max = 100)    #Value = "DefaultValue", min = 0, max = 1
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({                    #Outputs plot
title <- "100 random normal values"    #Optional plot title
hist(input$num)                        #Plot with inputs changing
})
}
shinyApp(ui = ui, server = server)
library(shiny)
#if(!exists("<functionname>", mode = "function")) source("<filename>") #Calls function from another R file into the workspace
ui <- fluidPage(
sliderInput(inputId = "num",                   #Variable Name in function (ShareFromNewEnrollees)
label = "Choose a number",         #Title of Slider ("Share From New Enrollees in %")
value = 25, min = 1, max = 100)    #Value = "DefaultValue", min = 0, max = 1
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({                    #Outputs plot
title <- "100 random normal values"    #Optional plot title
hist(rnorm(input$num))                 #Plot with inputs changing
})
}
shinyApp(ui = ui, server = server)
library(shiny)
#if(!exists("<functionname>", mode = "function")) source("<filename>") #Calls function from another R file into the workspace
ui <- fluidPage(
sliderInput(inputId = "num",                   #Variable Name in function (ShareFromNewEnrollees)
label = "Choose a number",         #Title of Slider ("Share From New Enrollees in %")
value = 25, min = 1, max = 100)    #Value = "DefaultValue", min = 0, max = 1
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({                    #Outputs plot
title <- "100 random normal values"    #Optional plot title
hist(rnorm(input$num))                 #Plot with inputs changing
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",                   #Variable Name in function (ShareFromNewEnrollees)
label = "Choose a number",         #Title of Slider ("Share From New Enrollees in %")
value = 25, min = 1, max = 100)    #Value = "DefaultValue", min = 0, max = 1
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({                    #Outputs plot
title <- "100 random normal values"    #Optional plot title
hist(rnorm(input$num), maine = title)                 #Plot with inputs changing
})
}
shinyApp(ui = ui, server = server)
library(shiny)
#if(!exists("<functionname>", mode = "function")) source("<filename>") #Calls function from another R file into the workspace
ui <- fluidPage(
sliderInput(inputId = "num",                   #Variable Name in function (ShareFromNewEnrollees)
label = "Choose a number",         #Title of Slider ("Share From New Enrollees in %")
value = 25, min = 1, max = 100)
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({                    #Outputs plot
title <- "100 random normal values"    #Optional plot title
hist(rnorm(input$num), maine = title)                 #Plot with inputs changing
})
}
shinyApp(ui = ui, server = server)
library(shiny)
#if(!exists("<functionname>", mode = "function")) source("<filename>") #Calls function from another R file into the workspace
ui <- fluidPage(
sliderInput(inputId = "num",                   #Variable Name in function (ShareFromNewEnrollees)
label = "Choose a number",         #Title of Slider ("Share From New Enrollees in %")
value = 25, min = 1, max = 100)
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({                    #Outputs plot
title <- "100 random normal values"    #Optional plot title
hist(rnorm(input$num), maine = title)                 #Plot with inputs changing
})
}
shinyApp(ui = ui, server = server)
library(shiny)
#if(!exists("<functionname>", mode = "function")) source("<filename>") #Calls function from another R file into the workspace
ui <- fluidPage(
sliderInput(inputId = "num",                   #Variable Name in function (ShareFromNewEnrollees)
label = "Choose a number",         #Title of Slider ("Share From New Enrollees in %")
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({                    #Outputs plot
title <- "100 random normal values"    #Optional plot title
hist(rnorm(input$num), maine = title)                 #Plot with inputs changing
})
}
shinyApp(ui = ui, server = server)
p <- ggplot(mpg,
aes(x = class, y = hwy, tooltip = class)) +
geom_boxplot_interactive()
ggiraph(code = print(p), width = .5)
p <- ggplot(mpg, aes(x = drv, y = hwy, tooltip = class, fill = class)) +
geom_boxplot_interactive(outlier.colour = "red") +
guides(fill = "none") + theme_minimal()
ggiraph(code = print(p), width = .5)
install.packages(ggiraph)
install.packages("ggiraph")
library(ggiraph)
p <- ggplot(mpg,
aes(x = class, y = hwy, tooltip = class)) +
geom_boxplot_interactive()
ggiraph(code = print(p), width = .5)
p <- ggplot(mpg, aes(x = drv, y = hwy, tooltip = class, fill = class)) +
geom_boxplot_interactive(outlier.colour = "red") +
guides(fill = "none") + theme_minimal()
ggiraph(code = print(p), width = .5)
)
library("shiny")
library("shinydashboard")
library("datasets")
header <- dashboardHeader()
sidebar <- dashboardSidebar()
body <- dashboardBody(
dataTableOutput("mtcarsTable")
)
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) {
output$mtcarsTable <- renderDataTable({
datasets::mtcars
}, options = list(rowCallback = I('
function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
// Bold and green cells for conditions
if (parseFloat(aData[3]) >= 200)
$("td:eq(3)", nRow).css("font-weight", "bold");
if (parseFloat(aData[3]) >= 100)
$("td:eq(3)", nRow).css("background-color", "#9BF59B");
}'),
pageLength = 10, orderClasses = TRUE, searching = FALSE, paging = FALSE
))
}
)
library("shiny")
library("shinydashboard")
library("datasets")
header <- dashboardHeader()
sidebar <- dashboardSidebar()
body <- dashboardBody(
dataTableOutput("mtcarsTable")
)
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) {
output$mtcarsTable <- renderDataTable({
datasets::mtcars
}, options = list(rowCallback = I('
function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
// Bold and green cells for conditions
if (parseFloat(aData[3]) >= 200)
$("td:eq(3)", nRow).css("font-weight", "bold");
if (parseFloat(aData[3]) >= 100)
$("td:eq(3)", nRow).css("background-color", "#9BF59B");
}'),
pageLength = 10, orderClasses = TRUE, searching = FALSE, paging = FALSE
))
}
)
runApp(list(
ui = shinyUI(fluidPage(
sidebarPanel(),
mainPanel(dataTableOutput("Table")  )
)),
server = function(input, output, session) {
output$Table<- renderDataTable({
Data<-data.frame(RowNumber= c(1,2,3,4,5,6),Type= c("R","E", "R","E","R","G"), YN =c("N","N","Y","N","Y","N"),P = c(500,100,500,900,0,900))
print(Data[Data$P== 0,])
Data
})
}
))
runApp(list(
ui = shinyUI(fluidPage(
sidebarPanel(),
mainPanel(dataTableOutput("Table")  )
)),
server = function(input, output, session) {
output$Table<- renderDataTable({
Data<-data.frame(RowNumber= c(1,2,3,4,5,6),Type= c("R","E", "R","E","R","G"), YN =c("N","N","Y","N","Y","N"),P = c(500,100,500,900,0,900))
print(Data[Data$P== 0,])
Data
},
rowCallback = JS("
function( row, data, index ) {
if ( index > 2 ) {
$(row).css('background-color', '#EDEDED');
}
else if ( index > 0 ) {
$(row).css('background-color', '#DEDEDE');
}
else {
$(row).css('background-color', '#D3D3D3');
}
}"
))
}
))
runApp(list(
ui = shinyUI(fluidPage(
sidebarPanel(),
mainPanel(dataTableOutput("Table")  )
)),
server = function(input, output, session) {
output$Table<- renderDataTable({
Data<-data.frame(RowNumber= c(1,2,3,4,5,6),Type= c("R","E", "R","E","R","G"), YN =c("N","N","Y","N","Y","N"),P = c(500,100,500,900,0,900))
print(Data[Data$P== 0,])
Data
},
rowCallback = JS("
function( row, data, index ) {
if ( index > 2 ) {
$(row).css('background-color', '#EDEDED');
}
else if ( index > 0 ) {
$(row).css('background-color', '#DEDEDE');
}
else {
$(row).css('background-color', '#D3D3D3');
}
}"
))
}
))
runApp(list(
ui = shinyUI(fluidPage(
sidebarPanel(),
mainPanel(dataTableOutput("Table")  )
)),
server = function(input, output, session) {
output$Table<- renderDataTable({
Data<-data.frame(RowNumber= c(1,2,3,4,5,6),Type= c("R","E", "R","E","R","G"), YN =c("N","N","Y","N","Y","N"),P = c(500,100,500,900,0,900))
print(Data[Data$P== 0,])
Data
},
options = list(
rowCallback = JS("
function( row, data, index ) {
if ( index > 2 ) {
$(row).css('background-color', '#EDEDED');
}
else if ( index > 0 ) {
$(row).css('background-color', '#DEDEDE');
}
else {
$(row).css('background-color', '#D3D3D3');
}
}"
))
}
)))
runApp(list(
ui = shinyUI(fluidPage(
sidebarPanel(),
mainPanel(dataTableOutput("Table")  )
)),
server = function(input, output, session) {
output$Table<- renderDataTable({
Data<-data.frame(RowNumber= c(1,2,3,4,5,6),Type= c("R","E", "R","E","R","G"), YN =c("N","N","Y","N","Y","N"),P = c(500,100,500,900,0,900))
print(Data[Data$P== 0,])
Data
},
options = list(
rowCallback = JS("
function( row, data, index ) {
if ( index > 2 ) {
$(row).css('background-color', '#EDEDED');
}
else if ( index > 0 ) {
$(row).css('background-color', '#DEDEDE');
}
else {
$(row).css('background-color', '#D3D3D3');
}
}"
))
}
)))
datatable(
data = Data<-data.frame(RowNumber= c(1,2,3,4,5,6),Type= c("R","E", "R","E","R","G"), YN =c("N","N","Y","N","Y","N"),P = c(500,100,500,900,0,900)),
options = list(
rowCallback = JS("
function( row, data, index ) {
var d = parseFloat(data[1]);
$(this.api().cell(row, 1).node()).html(isNaN(d) ? '' : d.toFixed(1));
var d = parseFloat(data[2]);
$(this.api().cell(row, 2).node()).html(isNaN(d) ? '' : d.toFixed(1));
if ( index > 2 ) {
$(row).css('background-color', '#EDEDED');
}
else if ( index > 0 ) {
$(row).css('background-color', '#DEDEDE');
}
else {
$(row).css('background-color', '#D3D3D3');
}
}"
)
)
)
runApp(list(
ui = shinyUI(fluidPage(
sidebarPanel(),
mainPanel(dataTableOutput("Table")  )
)),
server = function(input, output, session) {
output$Table<- renderDataTable({
data = Data<-data.frame(RowNumber= c(1,2,3,4,5,6),Type= c("R","E", "R","E","R","G"), YN =c("N","N","Y","N","Y","N"),P = c(500,100,500,900,0,900)),
options = list(
rowCallback = JS("
function( row, data, index ) {
var d = parseFloat(data[1]);
$(this.api().cell(row, 1).node()).html(isNaN(d) ? '' : d.toFixed(1));
var d = parseFloat(data[2]);
$(this.api().cell(row, 2).node()).html(isNaN(d) ? '' : d.toFixed(1));
if ( index > 2 ) {
$(row).css('background-color', '#EDEDED');
}
else if ( index > 0 ) {
$(row).css('background-color', '#DEDEDE');
}
else {
$(row).css('background-color', '#D3D3D3');
}
}"
)
)
))
}
)))
library(plotly)
library(plotly)
install.packages("ggplot2")
library(ggplot2)
library(data.table)
library(dplyr)
library(ggplot2)
library(forecast)
install.packages("ggplot2")
library(ggplot2)
?regex
library(cars)
library(car)
summary(mtcars)
str(mtcars)
?datasets
library(help="datasets")
str(AirPassengers)
str(uspop)
str(swiss)
str(state)
str(occupationalStatus)
head(occupationalStatus)
head(longley)
head(iris)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
shiny::runApp('Desktop/Delta nopass')
runApp('Desktop/Delta nopass')
library(rJava)
install.packages('rJava')
library(rJava)
getwd()
setwd('/Users/Caleb/Downloads/data-science-for-good')
